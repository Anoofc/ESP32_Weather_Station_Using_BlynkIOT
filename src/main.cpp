#include <Arduino.h>
#define BLYNK_PRINT Serial

#include <U8g2lib.h>
#include <WiFi.h>
#include <WiFiClient.h>
#include <BlynkSimpleEsp32.h>
#include <Adafruit_BMP280.h>
#include <Wire.h>
#include <DHT.h>

// You should get Auth Token in the Blynk App.
// Go to the Project Settings (nut icon).
char auth[] = "vmt10xlQ-N_xIon9zJAzL49FlXa_8YGQ";

// Your WiFi credentials.
// Set password to "" for open networks.
char ssid[] = "iPhone";
char pass[] = "Sameer@1234";

BlynkTimer timer;

U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, /* reset=*/U8X8_PIN_NONE);

#define BMP_SCK (13)
#define BMP_MISO (12)
#define BMP_MOSI (11)
#define BMP_CS (10)

Adafruit_BMP280 bmp; // I2C

#define buzzer 19
#define relay1 26
#define relay2 32
#define relay3 33
#define relay4 25
#define pirPin 35

#define DHTPIN 4
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

double pressure = 0;
double altitude = 0;
double temp = 0;
double t = 0;
double h = 0;
int f = 0;

int pirValue = 0;
int pirState;

BLYNK_CONNECTED()
{
  Blynk.syncAll();
}

BLYNK_WRITE(V11)
{
  int value = param.asInt();
  digitalWrite(relay4, value);
  digitalWrite(relay1, value);
}

BLYNK_WRITE(V12)
{
  int value = param.asInt();
  digitalWrite(relay2, value);
}

BLYNK_WRITE(V13)
{
  int value = param.asInt();
  digitalWrite(relay3, value);
}

BLYNK_WRITE(V15)
{
  pirState = param.asInt();
}

#define altitude_width 40
#define altitude_height 40
static unsigned char altitude_bits[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00,
    0x00, 0xc0, 0x0f, 0x00, 0x00, 0x00, 0xe0, 0x0f, 0x00, 0x00, 0x00, 0xe0,
    0x0f, 0x00, 0x00, 0x00, 0xe0, 0x0f, 0x00, 0x00, 0x00, 0xc0, 0x0f, 0x00,
    0x00, 0x00, 0x80, 0x07, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x70,
    0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x01, 0x00,
    0x00, 0x00, 0xfc, 0x01, 0x00, 0x00, 0x00, 0xfe, 0x03, 0x60, 0x00, 0x00,
    0x9c, 0x03, 0x70, 0x00, 0x00, 0x8c, 0x01, 0xf0, 0x00, 0x80, 0x08, 0x01,
    0x60, 0x00, 0x80, 0x01, 0x18, 0x60, 0x00, 0xc0, 0x21, 0x1c, 0x04, 0x02,
    0xe0, 0x63, 0x3c, 0x0e, 0x07, 0xe0, 0x73, 0x7e, 0x8c, 0x07, 0xf0, 0xff,
    0x7f, 0x9c, 0x0f, 0xf8, 0xff, 0xff, 0xf8, 0x1f, 0xf8, 0xff, 0xff, 0xf1,
    0x1f, 0xfc, 0xff, 0xff, 0xf1, 0x3f, 0xfc, 0xff, 0xff, 0xe3, 0x3f, 0xfe,
    0xff, 0xff, 0xc7, 0x7f, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff, 0xff,
    0xc7, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

#define temp_width 40
#define temp_height 40
static unsigned char temp_bits[] PROGMEM = {
    0x00, 0x80, 0x0f, 0x00, 0x00, 0x00, 0xc0, 0x3f, 0x00, 0x00, 0x00, 0xe0,
    0x3a, 0x00, 0x00, 0x00, 0x70, 0x70, 0x00, 0x00, 0x00, 0x30, 0x60, 0x38,
    0x00, 0x00, 0x30, 0x60, 0xfc, 0x00, 0x00, 0x30, 0xe0, 0x7c, 0x00, 0x00,
    0x30, 0xe0, 0x00, 0x00, 0x00, 0x30, 0xe0, 0x00, 0x00, 0x00, 0x30, 0xe6,
    0x7c, 0x00, 0x00, 0x30, 0xe7, 0xfc, 0x00, 0x00, 0x30, 0xe7, 0x78, 0x00,
    0x00, 0x30, 0xe7, 0x00, 0x00, 0x00, 0x30, 0xe7, 0x00, 0x00, 0x00, 0x30,
    0xe7, 0xfc, 0x00, 0x00, 0x30, 0xe7, 0xfc, 0x00, 0x00, 0x30, 0xe7, 0x00,
    0x00, 0x00, 0x30, 0xe7, 0x00, 0x00, 0x00, 0x30, 0xe7, 0x00, 0x00, 0x00,
    0x30, 0xe7, 0xfc, 0x00, 0x00, 0x30, 0xe7, 0xfc, 0x00, 0x00, 0x30, 0xe7,
    0x00, 0x00, 0x00, 0x30, 0xe7, 0x00, 0x00, 0x00, 0x38, 0xe7, 0x00, 0x00,
    0x00, 0x3c, 0xc7, 0x01, 0x00, 0x00, 0x1c, 0x87, 0x03, 0x00, 0x00, 0x8e,
    0x0f, 0x03, 0x00, 0x00, 0xc6, 0x1f, 0x07, 0x00, 0x00, 0xe6, 0x38, 0x07,
    0x00, 0x00, 0xe7, 0x30, 0x06, 0x00, 0x00, 0x67, 0x70, 0x06, 0x00, 0x00,
    0xe7, 0x30, 0x07, 0x00, 0x00, 0xe7, 0x38, 0x07, 0x00, 0x00, 0xc6, 0x1f,
    0x07, 0x00, 0x00, 0x8e, 0x8f, 0x03, 0x00, 0x00, 0x1c, 0x80, 0x03, 0x00,
    0x00, 0x38, 0xe0, 0x01, 0x00, 0x00, 0x70, 0xf2, 0x00, 0x00, 0x00, 0xe0,
    0x3f, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x00, 0x00};

#define humidity_width 40
#define humidity_height 40
static unsigned char humidity_bits[] PROGMEM = {
    0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00,
    0xc0, 0x03, 0x00, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x00, 0xf0, 0x07,
    0x00, 0x00, 0x00, 0xf8, 0x0f, 0x00, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00,
    0x00, 0xfc, 0x3f, 0x00, 0x00, 0x00, 0xfe, 0x3f, 0x00, 0x00, 0x00, 0xfe,
    0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x80, 0xff, 0xff, 0x00,
    0x00, 0x80, 0xff, 0xff, 0x01, 0x00, 0xc0, 0xff, 0xff, 0x03, 0x00, 0xe0,
    0xff, 0xff, 0x03, 0x00, 0xe0, 0xff, 0xff, 0x07, 0x00, 0xf0, 0xff, 0xff,
    0x07, 0x00, 0xf0, 0xff, 0xff, 0x0f, 0x00, 0xfc, 0xfb, 0xff, 0x0f, 0x8c,
    0xe7, 0xe0, 0xf8, 0x1f, 0xfc, 0x03, 0x00, 0xf8, 0x1f, 0xf8, 0x0d, 0x0e,
    0xfc, 0x3f, 0x40, 0xbc, 0xbf, 0xff, 0x3f, 0x00, 0xf8, 0xfb, 0xff, 0x3f,
    0x8c, 0xe1, 0xe0, 0xf8, 0x3f, 0xfc, 0x01, 0x00, 0xf8, 0x3f, 0xf8, 0x0f,
    0x0e, 0xfc, 0x3f, 0x40, 0xbe, 0xbf, 0xff, 0x3f, 0x00, 0xf8, 0xfb, 0xff,
    0x3f, 0x8c, 0xe3, 0xe0, 0xf8, 0x3f, 0xfc, 0x03, 0x00, 0xf8, 0x1f, 0xf8,
    0x09, 0x0e, 0xfc, 0x1f, 0x40, 0xb8, 0xbf, 0xff, 0x0f, 0x00, 0xf0, 0xff,
    0xff, 0x0f, 0x00, 0xf0, 0xff, 0xff, 0x07, 0x00, 0xe0, 0xff, 0xff, 0x03,
    0x00, 0xc0, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00,
    0xfe, 0x3f, 0x00, 0x00, 0x00, 0xf0, 0x0f, 0x00};

#define fire_width 40
#define fire_height 40
static unsigned char fire_bits[] PROGMEM = {
    0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
    0x07, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00,
    0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x80, 0x7f, 0x00, 0x00, 0x00,
    0x80, 0xff, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00, 0x00, 0xc0, 0xff,
    0x01, 0x00, 0x00, 0xe0, 0xff, 0x01, 0x00, 0x00, 0xe0, 0xff, 0x01, 0x00,
    0x00, 0xf0, 0xff, 0x03, 0x00, 0x00, 0xf0, 0xff, 0x03, 0x00, 0x00, 0xf8,
    0xff, 0x23, 0x00, 0x00, 0xf8, 0xff, 0x63, 0x00, 0x00, 0xfc, 0xff, 0x63,
    0x00, 0x00, 0xfc, 0xff, 0xe3, 0x00, 0x00, 0xfe, 0xff, 0xe3, 0x00, 0x00,
    0xfe, 0xff, 0xe3, 0x00, 0x00, 0xff, 0xff, 0xe3, 0x01, 0x00, 0xff, 0xfd,
    0xf3, 0x01, 0x80, 0xff, 0xfc, 0xf3, 0x01, 0x80, 0x7f, 0xf8, 0xfb, 0x01,
    0x80, 0x3f, 0xf8, 0xfb, 0x01, 0x80, 0x3f, 0xf8, 0xff, 0x01, 0x80, 0x1f,
    0xf8, 0xff, 0x01, 0x80, 0x1f, 0xf8, 0xff, 0x01, 0x80, 0x1f, 0xf0, 0xff,
    0x01, 0x80, 0x1f, 0xf0, 0xff, 0x01, 0x80, 0x0f, 0xf0, 0xff, 0x00, 0x80,
    0x0f, 0xe0, 0xff, 0x00, 0x00, 0x0f, 0xe0, 0x79, 0x00, 0x00, 0x1f, 0x40,
    0x78, 0x00, 0x00, 0x0e, 0x00, 0x38, 0x00, 0x00, 0x1e, 0x00, 0x1c, 0x00,
    0x00, 0x1c, 0x00, 0x1c, 0x00, 0x00, 0x18, 0x00, 0x0c, 0x00, 0x00, 0x10,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

void pirCheck()
{
  pirValue = digitalRead(pirPin);
  if (pirState == 1 && pirValue == 1)
  {
    digitalWrite(buzzer, HIGH);
  }
  else
  {
    digitalWrite(buzzer, LOW);
  }
}

void readSensor()
{
  pressure = bmp.readPressure();
  altitude = bmp.readAltitude(1013.25);
  temp = bmp.readTemperature();
  h = dht.readHumidity();
  t = dht.readTemperature();
  int fireSens = analogRead(36);
  f = map(fireSens, 0, 4095, 100, 0);

  Blynk.virtualWrite(V1, pressure);
  Blynk.virtualWrite(V2, altitude);
  Blynk.virtualWrite(V3, h);
  Blynk.virtualWrite(V4, t);
  Blynk.virtualWrite(V5, f);

  Serial.print(F("Temperature = "));
  Serial.print(t);
  Serial.println(" *C");

  Serial.print(F("Humidity = "));
  Serial.print(h);
  Serial.println(" %");

  Serial.print(F("Infrared Rays = "));
  Serial.print(f);
  Serial.println(" %");

  Serial.print(F("Pressure = "));
  Serial.print(pressure);
  Serial.println(" Pa");

  Serial.print(F("Approx altitude = "));
  Serial.print(altitude); /* Adjusted to local forecast! */
  Serial.println(" m");

  Serial.println();
}

void dispUpdate()
{

  u8g2.clearBuffer();                    // clear the internal memory
  u8g2.setFont(u8g2_font_logisoso16_tf); // choose a suitable font
  u8g2.setCursor(0, 35);
  u8g2.print("PRESSURE");
  u8g2.setFont(u8g2_font_logisoso16_tf); // choose a suitable font
  u8g2.setCursor(0, 60);
  u8g2.print(pressure);
  u8g2.print(" Pa");
  u8g2.sendBuffer();
  delay(1000);

  u8g2.clearBuffer();
  u8g2.drawXBMP(0, 12, altitude_width, altitude_height, altitude_bits);
  u8g2.setFont(u8g2_font_logisoso20_tf);
  u8g2.setCursor(45, 45);
  u8g2.print(altitude);
  u8g2.print("m");
  u8g2.sendBuffer(); // transfer internal memory to the display
  delay(1000);

  u8g2.clearBuffer();
  u8g2.drawXBMP(0, 12, altitude_width, altitude_height, altitude_bits);
  u8g2.setFont(u8g2_font_logisoso20_tf);
  u8g2.setCursor(45, 45);
  u8g2.print(altitude);
  u8g2.print("m");
  u8g2.sendBuffer(); // transfer internal memory to the display
  delay(1000);

  u8g2.clearBuffer();
  u8g2.setFont(u8g2_font_logisoso20_tf);
  u8g2.drawXBMP(0, 12, temp_width, temp_height, temp_bits);
  u8g2.setCursor(45, 45);
  u8g2.print(t);
  u8g2.print("C");
  u8g2.sendBuffer();
  delay(1000);

  u8g2.clearBuffer();
  u8g2.setFont(u8g2_font_logisoso20_tf);
  u8g2.drawXBMP(0, 12, humidity_width, humidity_height, humidity_bits);
  u8g2.setCursor(45, 45);
  u8g2.print(h);
  u8g2.print("%");
  u8g2.sendBuffer();
  delay(1000);

  u8g2.clearBuffer();
  u8g2.setFont(u8g2_font_logisoso20_tf);
  u8g2.drawXBMP(0, 12, fire_width, fire_height, fire_bits);
  u8g2.setCursor(45, 45);
  u8g2.print(f);
  u8g2.print("%");
  u8g2.sendBuffer();
  delay(1000);
}

void setup(void)
{

  pinMode(pirPin, INPUT);
  pinMode(buzzer, OUTPUT);
  pinMode(relay1, OUTPUT);
  pinMode(relay2, OUTPUT);
  pinMode(relay3, OUTPUT);
  pinMode(relay4, OUTPUT);

  Serial.begin(9600);
  Serial.println(F("BMP280 test"));

  // if (!bmp.begin(BMP280_ADDRESS_ALT, BMP280_CHIPID)) {
  if (!bmp.begin())
  {
    Serial.println(F("Could not find a valid BMP280 sensor, check wiring or "
                     "try a different address!"));
    while (1)
      delay(10);
  }

  /* Default settings from datasheet. */
  bmp.setSampling(Adafruit_BMP280::MODE_NORMAL,     /* Operating Mode. */
                  Adafruit_BMP280::SAMPLING_X2,     /* Temp. oversampling */
                  Adafruit_BMP280::SAMPLING_X16,    /* Pressure oversampling */
                  Adafruit_BMP280::FILTER_X16,      /* Filtering. */
                  Adafruit_BMP280::STANDBY_MS_500); /* Standby time. */
  u8g2.begin();
  u8g2.setI2CAddress(0x78);
  dht.begin();

  Blynk.begin(auth, ssid, pass);
  timer.setInterval(100L, readSensor);
  timer.setInterval(7000L, dispUpdate);
  timer.setInterval(100L, pirCheck);
}

void loop(void)
{
  Blynk.run();
  timer.run();
}
